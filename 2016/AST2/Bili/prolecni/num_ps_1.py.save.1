import math
import pylab as pl
import numpy as np

M=0.029
g=9.81
R=8.314
T=200
ro=0.122

h=2e+5
m=1e-5
v=4e+4
rom=3000
zr=np.pi/4

G=1
A=1.21
lamb=1
Z=6e+6

#def koef_bright(v):
   # if (v>16000):
     #   temp_koef=0.024*math.pow((v/1000+8.8),-1)
  #  else:
  #      temp_koef=6.04*1e-4*math.pow((v/1000-8.8),-0.35)
  #  return temp_koef

def velocity_lost(v,t):
    fder1=-G*A*math.pow(m,-1/3)*math.pow(rom,-2/3)*density_atm(h)*v*v	
    return fder1

def mass_lost(m,t):
    fder2=-(lamb*A*math.pow(m,2/3)*math.pow(rom,-2/3)*density_atm(h)*v*v*v)/(2*Z)
    return fder2
  
def Runge_mass(t0,m0,dt):
    k1=dt*mass_lost(t0,m0)
    k2=dt*mass_lost(t0+dt/2,m0+dt*k1/2)
    k3=dt*mass_lost(t0+dt/2,m0+dt*k2/2)
    k4=dt*mass_lost(t0+dt,m0+dt*k3)
    m1=m0+dt*(k1+2*k2+2*k3+k4)/6	
    return m1
	
def Runge_velocity(t0,v0,dt):
    k1=dt*velocity_lost(t0,v0)
    k2=dt*velocity_lost(t0+dt/2,v0+dt*k1/2)
    k3=dt*velocity_lost(t0+dt/2,v0+dt*k2/2)
    k4=dt*velocity_lost(t0+dt,v0+dt*k3)
    v1=v0+dt*(k1+2*k2+2*k3+k4)/6	
    return v1		

def height(h,v,dt):
    temp_height=h-v*math.cos(zr)*dt
    return temp_height

def density_atm(h):
    tempd=ro*math.exp(-(M*g*h)/(R*T))
    return tempd
	
#def int_of_rad(m,v,h,t,dt):    
    #m=Runge_mass(t,m,dt)
    #v=Runge_velocity(t,v,dt)
    #h=height(h,v,dt)
    #roa=density_atm(h)
    #tau=koef_bright(v)
    #intensity=(tau*lamb*A*math.pow(m,2/3)*math.pow(rom,-2/3)*roa*(v**5))/(4*Z)
    #return intensity	
		
#def distance(h):
    #dist=h/np.cos(zr)
    #return dist
		
#def app_magn(d,I):
   # I=int_of_rad(m,v,h,t,dt)
    #temp_magnitude=-14.8-2.5*math.log((683*I)/(4*np.pi*(distance(h)**2)),10)
    #return temp_magnitude 		

m0=m
j=1
k=0
t=0
dt=0
#X1=[0]*100000000
#X2=[0]*100000000
#Y=[0]*100000000

#X1[0]=0
#X2[0]=h
#I0=int_of_rad(m,v,h,0,0)
#Y[0]=I0


while (m > m0/1000):    
    #I=int_of_rad(m,v,h,t,dt)
    #if (i%10==0):
        #k+=1
    #Y[j]=I
    #X1[j]=t
    #print(v,t)
    #print(m,t)
    #X2[j]=h
    Runge_mass(,)
    t+=dt
    j+=1
    
pl.plot(X1,Y,"green")
#pl.plot(X2,Y,"blue")
pl.show()
